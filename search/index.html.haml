---
layout: project-about
title: ORM. Lucene. Elasticsearch. Integrated.
project: search
---

-# Center body
.feature-block
  :asciidoc
    == Full-text search for entities

    Hibernate Search automatically extracts data from Hibernate ORM entities to push it to
    local http://lucene.apache.org/[Apache Lucene] indexes
    or remote https://www.elastic.co/products/elasticsearch[Elasticsearch]/https://www.opensearch.org[OpenSearch] indexes.

    It features:

    * https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#mapper-orm-mapping[**Declarative mapping**]
    of entity properties to index fields,
    either through annotations or a programmatic API.
    * https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#mapper-orm-indexing-massindexer[**On-demand mass indexing**]
    of all entities in the database,
    to initialize the indexes with pre-existing data.
    * https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#mapper-orm-indexing-automatic[**On-the-fly automatic indexing**]
    of entities modified through a Hibernate ORM session,
    to always keep the indexes up-to-date.
    * https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#search-dsl[**A Search DSL**]
    to easily build full-text search queries
    and retrieve the hits as Hibernate ORM entities.
    * And much more! (see below)

    For example, map your entities like this:

    [source,java]
    ----
    @Entity
    // This entity is mapped to an index
    @Indexed
    public class Book {

        // The entity ID is the document ID
        @Id
        @GeneratedValue
        private Integer id;

        // This property is mapped to a document field
        @FullTextField
        private String title;

        @ManyToMany
        // Authors will be embedded in Book documents
        @IndexedEmbedded
        private Set<Author> authors = new HashSet<>();

        // Getters and setters
        // ...
    }

    @Entity
    public class Author {

        @Id
        @GeneratedValue
        private Integer id;

        // This property is mapped to a document field
        @FullTextField
        private String name;

        @ManyToMany(mappedBy = "authors")
        private Set<Book> books = new HashSet<>();

        // Getters and setters
        // ...
    }
    ----

    Index pre-existing data like this:

    [source,java]
    ----
    SearchSession searchSession = Search.session( entityManager );
    MassIndexer indexer = searchSession.massIndexer( Book.class );
    indexer.startAndWait();
    ----

    Automatic indexing does not require any change to code based on JPA or Hibernate ORM:

    [source,java]
    ----
    Author author = new Author();
    author.setName( "Isaac Asimov" );

    Book book = new Book();
    book.setTitle( "The Caves Of Steel" );
    book.getAuthors().add( author );
    author.getBooks().add( book );

    entityManager.persist( author );
    entityManager.persist( book );
    ----

    And search like this:

    [source,java]
    ----
    SearchResult<Book> result = Search.session( entityManager )
            .search( Book.class )
            .where( f -> f.match()
                    .fields( "title", "authors.name" )
                    .matching( "Isaac" ) )
            .fetch( 20 );

    List<Book> hits = result.hits();
    long totalHitCount = result.total().hitCount();
    ----
.feature-block
  :asciidoc
    == Full control

    Unlike with web search, this is your data, your domain, your application, stored wherever you decide.

    You can chose what to index (and how to index it) very precisely with
    https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#mapper-orm-directfieldmapping[per-property mapping]
    and go even further with https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#mapper-orm-bridge[custom bridges].

    You also have far better control on how your data is processed with
    https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#concepts-analysis[configurable analysis],
    so you can:

    * Tune text processing for specific languages.
    * Tune text processing for domain specific terminology (e.g. medical terms, custom acronyms expansion, ...).
    * Control the ranking process: which results are more important.
.feature-block
  :asciidoc
    == Easy yet powerful

    Designed to be easy to use from the ground up.
    Handles schema initialization, indexing and query syntax transparently while you focus on the business side of your search.

    The Search DSL exposes many different https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#search-dsl-predicate[predicates]
    and https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#search-dsl-sort[sorts]
    through a succinct, easy-to-use API.

    And if you need to go beyond, it won't stop you:
    native https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#search-dsl-predicate-extensions-lucene-from-lucene-query[Lucene Queries]
    or https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#search-dsl-predicate-extensions-elasticsearch-from-json[Elasticsearch JSON]
    can be inserted right in the middle of Search DSL queries.
.feature-block
  :asciidoc
    == Local or distributed

    While you'll find that performance of a "single box" based on http://lucene.apache.org/[Apache Lucene] is exceptional,
    you can also scale out by distributing your application
    and relying on an https://www.elastic.co/products/elasticsearch/[Elasticsearch] cluster for indexing,
    with only a few configuration changes.
.feature-block
  :asciidoc
    == Spatial queries

    Indexing geo-localized entities is as easy as
    https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#mapper-orm-geopoint[adding the `@GenericField` annotation].

    https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#search-dsl-predicate-spatial-within[Filter results around a certain location]
    like the user position,
    and use a https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#search-dsl-sort-distance[distance sort]
    to pull to the top the matching pizzerias which are closest to the user.
.feature-block
  :asciidoc
    == Aggregations

    Get search results https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#search-dsl-aggregation[aggregated] by groups and categories.

    For example webshops will want to show all hits,
    but also display a count of hits by price range and brand.
